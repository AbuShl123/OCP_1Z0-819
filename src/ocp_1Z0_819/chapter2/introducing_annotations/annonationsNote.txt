Chapter 2 - Annotations |
________________________|

        Exams objectives covered in this chapter:
            ■ Describe the purpose of annotations and typical usage patterns
            ■ Apply annotations to classes and methods
            ■ Describe commonly used annotations in the JDK
            ■ Declare custom annotations


==================================                                                 ||   terminologies:
Annotation Definition and purpose                                                  ||   marker annotation - an annotation without elements()
==================================

    Annotations are about metadata.
        - metadata is data that provides information about other data

    The purpose
        of annotation is to design metadata attributes to classes, methods, variables and other Java types.

    Annotation Basic Rules:
        1) annotations function a lot like interfaces
        2) annotations establish relationships that make it easier to manage data about our application
        3) an annotation ascribes custom information on the declaration where it is defined
        4) annotations are optional metadata and by themselves do not do anything

    Explanation on some rules:
        Rule No. 2: hard to explain. Just saves us from necessity to write additional extra classes
        Rule No. 3: the same annotation can often be applied to completely different and unrelated classes or variables
        Rule No. 4: if you take a project with thousands annotations and remove all of them, the code will still compile, albeit with different behaviour at runtime


================================
Creating custom annotations
================================


    (!) Annotations can also be created inside other classes.
    (!) an annotation element without a default value is considered required
    (!) Annotation elements are public abstract
    (!) Fields are public static final variables

            ``
            public @interface AnnotationName {
                int fieldNumber();           // this will be required when using the annotation
                int another() default 2;     // this one won't be required
                int MIN_BOUNDARY = 12;       // can be accessed by other classes directly
            }
            ``


    IMPORTANT: a defaulting value of an annotation element must be a non-null constant expression!!
    IMPORTANT: an annotation element cannot be just any type. It must be a primitive type, a Class, an Enum, another annotation, or one-dim array of these types

            ``
            public @interface BadAnnotation {
                String name() default new String("");   // DOES NOT COMPILE (because not a compile-time constant)
                String address() default "";
                String default null;                    // DOES NOT COMPILE
                Integer height();                       // DOES NOT COMPILE
                String[][] generalInfo();               // DOES NOT COMPILE (just String[] would compile)
                Exercise exercise() default @Exercise(hoursPerDay=2)
            }
            ``

